Welcome to My Neural network software.
This documnet includes what is updated.
If you want to check license pls read Licence.txt

*08-28-2020
1. Update OMP algorithm for the each neural network, to protect data override, the matrix algorithm is not applied the OMP
2. Update Visible annotation for each functino of neural block

********************HOW TO USE**********************************
1. Create NEURON_BLOCK with specific type (I recommand float)
2. First Add input layer
3. Add hidden layer 
4. Add output layer
5. Setting learn option
6. Input data
7. Ouput data
8. Checking the error
9. Back Propagation 

*******************************************BASIC Example******************************************************
#include <USG_NEURON_BLOCK>

void main()
{
  	//SET UP LAYER
	NEURON_BLOCK<float> myNeuron ;
	myNeuron.ADD_LAYER(10, NONE); //THE FIRST LAYER IS INPUT LAYER WITH NO ACTIVATION
	myNeuron.ADD_LAYER(10, ReLU); //THE SECON IS HIDDEN
	myNeuron.ADD_LAYER(10, ReLU); //THE THIRD IS HIDDEN
	myNeuron.ADD_LAYER(4, NONE); //THE LAST IS OUTPUT LAYER
	myNeuron.W_INIT(HENORM);
	myNeuron.LEARN_SET(0.9, 0.0001, MEAN, NEST); 
  //SETUP THE LEARNING METHODS, 0.9 velocity, 0.0005 learning rate, Mean square error check, Nesterov optimizaer
	myNeuron.INPUT(input, 10); //SETUP INPUT DATA
	while (true) 
	{
		myNeuron.CPU_RUN(true);//CUDA_RUN(&myNeuron, true);
		myNeuron.OUTPUT(output, 4);			
		double error = myNeuron.LOSS_CHECK(target);
		if (error < 0.01) //IF IT IS LESS THAN 0.001 
			break;
		std::printf("error %g\n", error);
		myNeuron.CPU_BACK_PROPA(target);// GPU_BACK_PROPA(&myNeuron, target);		
	}
	myNeuron.OUTPUT(output, 4);
	std::printf("The neuron suggestes = {%f, %f, %f, %f}\n", output[0], output[1], output[2], output[3]);
}
